{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dasam\\\\OneDrive\\\\Desktop\\\\Web development\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { fetchData } from './utils';\nimport Board from \"./Components/Board/Board\";\nimport CustomDropdown from \"./Components/CustomDropdown\";\nimport Editable from \"./Components/Editabled/Editable\";\nimport PriorityHighIcon from '@mui/icons-material/PriorityHigh';\nimport SignalCellularAlt1BarIcon from '@mui/icons-material/SignalCellularAlt1Bar';\nimport SignalCellularAlt2BarIcon from '@mui/icons-material/SignalCellularAlt2Bar';\nimport SignalCellularAltIcon from '@mui/icons-material/SignalCellularAlt';\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [boards, setBoards] = useState([]);\n  const [targetCard, setTargetCard] = useState({\n    bid: \"\",\n    cid: \"\"\n  });\n  const handleGroupingChange = value => {\n    setSelectedGrouping(value);\n  };\n  const handleOrderingChange = value => {\n    setSelectedOrdering(value);\n  };\n  const addboardHandler = name => {\n    const tempBoards = [...boards];\n    tempBoards.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: []\n    });\n    setBoards(tempBoards);\n  };\n  const removeBoard = id => {\n    const index = boards.findIndex(item => item.id === id);\n    if (index < 0) return;\n    const tempBoards = [...boards];\n    tempBoards.splice(index, 1);\n    setBoards(tempBoards);\n  };\n  const addCardHandler = (id, title) => {\n    console.log(id, title);\n    const index = boards.findIndex(item => item.id === id);\n    if (index < 0) {\n      // Board with the given id is not found, add a new card directly to groupedUserTickets\n\n      const newCard = {\n        id: Date.now() + Math.random() * 2,\n        title\n      };\n      setGroupedUserTickets(prevGrouped => {\n        console.log(\"Previous Grouped:\", prevGrouped[id]);\n        prevGrouped[id] = [...prevGrouped[id], newCard];\n        return {\n          ...prevGrouped\n          // Your state update logic here\n        };\n      });\n    } else {\n      // Board with the given id is found, add a new card to the existing board\n      const tempBoards = [...boards];\n      tempBoards[index].cards.push({\n        id: Date.now() + Math.random() * 2,\n        title,\n        labels: [],\n        date: \"\",\n        tasks: []\n      });\n      setBoards(tempBoards);\n    }\n  };\n  const removeCard = (bid, cid) => {\n    const index = boards.findIndex(item => item.id === bid);\n    if (index < 0) {\n      // Board with the given id is not found, remove the card from groupedUserTickets\n      console.log(\"Board not found, removing from groupedUserTickets\");\n      setGroupedUserTickets(prevGrouped => {\n        const updatedGrouped = {\n          ...prevGrouped\n        };\n\n        // Check if the board exists in groupedUserTickets\n        if (updatedGrouped[bid]) {\n          // Filter out the card with the matching cid\n          updatedGrouped[bid] = updatedGrouped[bid].filter(card => card.id !== cid);\n        }\n        return updatedGrouped;\n      });\n      return;\n    }\n\n    // Board is found, remove the card from the board in boards\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n    const cardIndex = cards.findIndex(item => item.id === cid);\n    if (cardIndex < 0) return;\n    cards.splice(cardIndex, 1);\n    setBoards(tempBoards);\n  };\n  const [tickets, setTickets] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [groupedUserTickets, setGroupedUserTickets] = useState({\n    'Backlog': [],\n    'Todo': [],\n    'In progress': [],\n    'Done': [],\n    'Cancelled': []\n  });\n  const [selectedGrouping, setSelectedGrouping] = useState('');\n  const [selectedOrdering, setSelectedOrdering] = useState('');\n  useEffect(() => {\n    fetchData().then(_ref => {\n      let {\n        tickets,\n        users\n      } = _ref;\n      setTickets(tickets);\n      setUsers(users);\n\n      // Group tickets dynamically based on selected grouping\n      let groupedTickets = {};\n      if (selectedGrouping === 'status') {\n        // Group by status\n        groupedTickets = tickets.reduce((grouped, ticket) => {\n          const status = ticket.status;\n          if (!grouped[status]) {\n            grouped[status] = [];\n          }\n          grouped[status].push(ticket);\n          return grouped;\n        }, {});\n      } else if (selectedGrouping === 'priority') {\n        // Mapping of priority values to board names and icons\n        const priorityBoardInfo = {\n          0: {\n            name: 'No Priority',\n            icon: /*#__PURE__*/_jsxDEV(MoreHorizIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 43\n            }, this)\n          },\n          1: {\n            name: 'Low',\n            icon: /*#__PURE__*/_jsxDEV(SignalCellularAlt1BarIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 35\n            }, this)\n          },\n          2: {\n            name: 'Medium',\n            icon: /*#__PURE__*/_jsxDEV(SignalCellularAlt2BarIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 38\n            }, this)\n          },\n          3: {\n            name: 'High',\n            icon: /*#__PURE__*/_jsxDEV(SignalCellularAltIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 36\n            }, this)\n          },\n          4: {\n            name: 'Urgent',\n            icon: /*#__PURE__*/_jsxDEV(PriorityHighIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 38\n            }, this)\n          }\n        };\n\n        // Group by priority with mapped board names and icons\n        groupedTickets = tickets.reduce((grouped, ticket) => {\n          const priority = ticket.priority;\n          const {\n            name,\n            icon\n          } = priorityBoardInfo[priority];\n          if (!grouped[name]) {\n            grouped[name] = [];\n          }\n          grouped[name].push({\n            ...ticket,\n            icon\n          });\n          return grouped;\n        }, {});\n      } else if (selectedGrouping === 'user') {\n        console.log(users);\n        groupedTickets = tickets.reduce((grouped, ticket) => {\n          const userId = ticket.userId;\n          const user = users.find(user => user.id === userId);\n          if (user) {\n            const userName = user.name;\n            if (!grouped[userName]) {\n              grouped[userName] = [];\n            }\n            grouped[userName].push(ticket);\n          }\n          return grouped;\n        }, {});\n      }\n      setGroupedUserTickets(groupedTickets);\n    });\n  }, [selectedGrouping]);\n  const dragEnded = (bid, cid) => {\n    var _boards$s_boardIndex, _boards$s_boardIndex$, _boards$t_boardIndex, _boards$t_boardIndex$;\n    let s_boardIndex, s_cardIndex, t_boardIndex, t_cardIndex;\n    s_boardIndex = boards.findIndex(item => item.id === bid);\n    if (s_boardIndex < 0) {\n      var _groupedUserTickets$b, _groupedUserTickets$t;\n      const sourceCardIndex = (_groupedUserTickets$b = groupedUserTickets[bid]) === null || _groupedUserTickets$b === void 0 ? void 0 : _groupedUserTickets$b.findIndex(item => item.id === cid);\n      const targetCardIndex = (_groupedUserTickets$t = groupedUserTickets[targetCard.bid]) === null || _groupedUserTickets$t === void 0 ? void 0 : _groupedUserTickets$t.findIndex(item => item.id === targetCard.cid);\n\n      // Ensure sourceCardIndex and targetCardIndex are valid before proceeding\n      if (sourceCardIndex < 0 || targetCardIndex < 0) {\n        return;\n      }\n      const sourceBoards = [...groupedUserTickets[bid]];\n      const targetBoards = [...groupedUserTickets[targetCard.bid]];\n      const sourceCard = sourceBoards[sourceCardIndex];\n      sourceBoards.splice(sourceCardIndex, 1);\n      targetBoards.splice(targetCardIndex, 0, sourceCard);\n\n      // Update the state to trigger re-render\n      setGroupedUserTickets(prevGrouped => ({\n        ...prevGrouped,\n        [bid]: sourceBoards,\n        [targetCard.bid]: targetBoards\n      }));\n      setTargetCard({\n        bid: \"\",\n        cid: \"\"\n      });\n      return;\n    }\n    s_cardIndex = (_boards$s_boardIndex = boards[s_boardIndex]) === null || _boards$s_boardIndex === void 0 ? void 0 : (_boards$s_boardIndex$ = _boards$s_boardIndex.cards) === null || _boards$s_boardIndex$ === void 0 ? void 0 : _boards$s_boardIndex$.findIndex(item => item.id === cid);\n    if (s_cardIndex < 0) return;\n    t_boardIndex = boards.findIndex(item => item.id === targetCard.bid);\n    if (t_boardIndex < 0) return;\n    t_cardIndex = (_boards$t_boardIndex = boards[t_boardIndex]) === null || _boards$t_boardIndex === void 0 ? void 0 : (_boards$t_boardIndex$ = _boards$t_boardIndex.cards) === null || _boards$t_boardIndex$ === void 0 ? void 0 : _boards$t_boardIndex$.findIndex(item => item.id === targetCard.cid);\n    if (t_cardIndex < 0) return;\n    const tempBoards = [...boards];\n    const sourceCard = tempBoards[s_boardIndex].cards[s_cardIndex];\n    tempBoards[s_boardIndex].cards.splice(s_cardIndex, 1);\n    tempBoards[t_boardIndex].cards.splice(t_cardIndex, 0, sourceCard);\n    setBoards(tempBoards);\n    setTargetCard({\n      bid: \"\",\n      cid: \"\"\n    });\n  };\n  const dragEntered = (bid, cid) => {\n    if (targetCard.cid === cid) return;\n    setTargetCard({\n      bid,\n      cid\n    });\n    console.log(\"drag\");\n  };\n  const updateCard = (bid, cid, card) => {\n    console.log(card);\n    const index = boards.findIndex(item => item.id === bid);\n    if (index < 0) {\n      var _groupedUserTickets$b2;\n      // Board with the given id is not found, update the card directly in groupedUserTickets\n      const sourceCardIndex = (_groupedUserTickets$b2 = groupedUserTickets[bid]) === null || _groupedUserTickets$b2 === void 0 ? void 0 : _groupedUserTickets$b2.findIndex(item => item.id === cid);\n\n      // Ensure sourceCardIndex is valid before proceeding\n      if (sourceCardIndex < 0) {\n        return;\n      }\n      const sourceBoards = [...groupedUserTickets[bid]];\n      sourceBoards[sourceCardIndex] = card;\n\n      // Update the state to trigger re-render\n      setGroupedUserTickets(prevGrouped => ({\n        ...prevGrouped,\n        [bid]: sourceBoards\n      }));\n      return;\n    }\n\n    // Board with the given id is found, update the card in the existing board\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n    const cardIndex = cards.findIndex(item => item.id === cid);\n    if (cardIndex < 0) {\n      return;\n    }\n    tempBoards[index].cards[cardIndex] = card;\n\n    // Update the state to trigger re-render\n    setBoards(tempBoards);\n  };\n  useEffect(() => {\n    localStorage.setItem(\"prac-kanban\", JSON.stringify(boards));\n  }, [boards]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app_nav\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Kanban Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CustomDropdown, {\n        onGroupingChange: handleGroupingChange,\n        onOrderingChange: handleOrderingChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Selected Grouping: \", selectedGrouping]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app_boards_container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app_boards\",\n          children: [boards.map(item => /*#__PURE__*/_jsxDEV(Board, {\n            board: item,\n            addCard: addCardHandler,\n            removeBoard: () => removeBoard(item.id),\n            removeCard: removeCard,\n            dragEnded: dragEnded,\n            dragEntered: dragEntered,\n            updateCard: updateCard,\n            addBoard: addboardHandler\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }, this)), Object.keys(groupedUserTickets).map(boardKey => /*#__PURE__*/_jsxDEV(Board, {\n            board: {\n              id: boardKey,\n              title: boardKey,\n              cards: groupedUserTickets[boardKey]\n            },\n            addCard: addCardHandler,\n            removeBoard: () => removeBoard(boardKey),\n            removeCard: removeCard,\n            dragEnded: dragEnded,\n            dragEntered: dragEntered,\n            updateCard: updateCard,\n            addBoard: addboardHandler\n          }, boardKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"app_boards_last\",\n            children: /*#__PURE__*/_jsxDEV(Editable, {\n              displayClass: \"app_boards_add-board\",\n              editClass: \"app_boards_add-board_edit\",\n              placeholder: \"Enter Board Name\",\n              text: \"Add Board\",\n              buttonText: \"Add Board\",\n              onSubmit: addboardHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"H/wzLAhU75/+jm5BQ47ZklzYMl4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","fetchData","Board","CustomDropdown","Editable","PriorityHighIcon","SignalCellularAlt1BarIcon","SignalCellularAlt2BarIcon","SignalCellularAltIcon","MoreHorizIcon","jsxDEV","_jsxDEV","App","_s","boards","setBoards","targetCard","setTargetCard","bid","cid","handleGroupingChange","value","setSelectedGrouping","handleOrderingChange","setSelectedOrdering","addboardHandler","name","tempBoards","push","id","Date","now","Math","random","title","cards","removeBoard","index","findIndex","item","splice","addCardHandler","console","log","newCard","setGroupedUserTickets","prevGrouped","labels","date","tasks","removeCard","updatedGrouped","filter","card","cardIndex","tickets","setTickets","users","setUsers","groupedUserTickets","selectedGrouping","selectedOrdering","then","_ref","groupedTickets","reduce","grouped","ticket","status","priorityBoardInfo","icon","fileName","_jsxFileName","lineNumber","columnNumber","priority","userId","user","find","userName","dragEnded","_boards$s_boardIndex","_boards$s_boardIndex$","_boards$t_boardIndex","_boards$t_boardIndex$","s_boardIndex","s_cardIndex","t_boardIndex","t_cardIndex","_groupedUserTickets$b","_groupedUserTickets$t","sourceCardIndex","targetCardIndex","sourceBoards","targetBoards","sourceCard","dragEntered","updateCard","_groupedUserTickets$b2","localStorage","setItem","JSON","stringify","className","children","onGroupingChange","onOrderingChange","map","board","addCard","addBoard","Object","keys","boardKey","displayClass","editClass","placeholder","text","buttonText","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/dasam/OneDrive/Desktop/Web development/my-react-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchData } from './utils';\n\nimport Board from \"./Components/Board/Board\";\nimport CustomDropdown from \"./Components/CustomDropdown\";\nimport Editable from \"./Components/Editabled/Editable\";\nimport PriorityHighIcon from '@mui/icons-material/PriorityHigh';\nimport SignalCellularAlt1BarIcon from '@mui/icons-material/SignalCellularAlt1Bar';\nimport SignalCellularAlt2BarIcon from '@mui/icons-material/SignalCellularAlt2Bar';\nimport SignalCellularAltIcon from '@mui/icons-material/SignalCellularAlt';\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\n\n\nimport \"./App.css\";\n\nfunction App() {\n  const [boards, setBoards] = useState(\n     []\n  );\n \n\n  const [targetCard, setTargetCard] = useState({\n    bid: \"\",\n    cid: \"\",\n  });\n  \n  const handleGroupingChange = (value) => {\n    setSelectedGrouping(value);\n  };\n\n  const handleOrderingChange = (value) => {\n    setSelectedOrdering(value);\n  };\n\n  const addboardHandler = (name) => {\n    const tempBoards = [...boards];\n    tempBoards.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: [],\n    });\n    setBoards(tempBoards);\n  };\n  \n\n  const removeBoard = (id) => {\n    \n    const index = boards.findIndex((item) => item.id === id);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    tempBoards.splice(index, 1);\n    setBoards(tempBoards);\n  };\n\n  const addCardHandler = (id, title) => {\n    console.log(id, title);\n    const index = boards.findIndex((item) => item.id === id);\n  \n    if (index < 0) {\n      // Board with the given id is not found, add a new card directly to groupedUserTickets\n    \n      const newCard = {\n        id: Date.now() + Math.random() * 2,\n        title,\n        \n      };\n  \n      setGroupedUserTickets((prevGrouped) => {\n        console.log(\"Previous Grouped:\", prevGrouped[id]);\n        prevGrouped[id]=[...prevGrouped[id],newCard]\n        \n      \n        return {\n          ...prevGrouped,\n          // Your state update logic here\n        };\n      });\n    \n    } else {\n      // Board with the given id is found, add a new card to the existing board\n      const tempBoards = [...boards];\n      tempBoards[index].cards.push({\n        id: Date.now() + Math.random() * 2,\n        title,\n        labels: [],\n        date: \"\",\n        tasks: [],\n      });\n  \n      setBoards(tempBoards);\n    }\n  };\n  \n\n      const removeCard = (bid, cid) => {\n        \n        const index = boards.findIndex((item) => item.id === bid);\n      \n        if (index < 0) {\n          // Board with the given id is not found, remove the card from groupedUserTickets\n          console.log(\"Board not found, removing from groupedUserTickets\");\n      \n          setGroupedUserTickets((prevGrouped) => {\n            const updatedGrouped = { ...prevGrouped };\n      \n            // Check if the board exists in groupedUserTickets\n            if (updatedGrouped[bid]) {\n              // Filter out the card with the matching cid\n              updatedGrouped[bid] = updatedGrouped[bid].filter((card) => card.id !== cid);\n            }\n      \n            return updatedGrouped;\n          });\n      \n          return;\n        }\n      \n        // Board is found, remove the card from the board in boards\n        const tempBoards = [...boards];\n        const cards = tempBoards[index].cards;\n      \n        const cardIndex = cards.findIndex((item) => item.id === cid);\n        if (cardIndex < 0) return;\n      \n        cards.splice(cardIndex, 1);\n        setBoards(tempBoards);\n      };\n  \n\n  const [tickets, setTickets] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [groupedUserTickets, setGroupedUserTickets] = useState({\n    'Backlog': [],\n    'Todo': [],\n    'In progress': [],\n    'Done': [],\n    'Cancelled': [],\n  });\n  const [selectedGrouping, setSelectedGrouping] = useState('');\n  const [selectedOrdering, setSelectedOrdering] = useState('');\n\n  useEffect(() => {\n  fetchData().then(({ tickets, users }) => {\n  \n    setTickets(tickets);\n    setUsers(users);\n\n    // Group tickets dynamically based on selected grouping\n    let groupedTickets = {};\n    if (selectedGrouping === 'status') {\n      // Group by status\n      groupedTickets = tickets.reduce((grouped, ticket) => {\n        const status = ticket.status;\n        if (!grouped[status]) {\n          grouped[status] = [];\n        }\n        grouped[status].push(ticket);\n        return grouped;\n      }, {});\n    } \n    \n      else if (selectedGrouping === 'priority') {\n        // Mapping of priority values to board names and icons\n        const priorityBoardInfo = {\n          0: { name: 'No Priority', icon: <MoreHorizIcon /> },\n          1: { name: 'Low', icon: <SignalCellularAlt1BarIcon /> },\n          2: { name: 'Medium', icon: <SignalCellularAlt2BarIcon /> },\n          3: { name: 'High', icon: <SignalCellularAltIcon /> },\n          4: { name: 'Urgent', icon: <PriorityHighIcon /> },\n        };\n\n        // Group by priority with mapped board names and icons\n        groupedTickets = tickets.reduce((grouped, ticket) => {\n          const priority = ticket.priority;\n          const { name, icon } = priorityBoardInfo[priority];\n          if (!grouped[name]) {\n            grouped[name] = [];\n          }\n          grouped[name].push({ ...ticket, icon });\n          return grouped;\n        }, {});\n      }\n    else if (selectedGrouping === 'user') {\n      console.log(users);\n    \n      groupedTickets = tickets.reduce((grouped, ticket) => {\n        const userId = ticket.userId;\n        const user = users.find((user) => user.id === userId);\n    \n        if (user) {\n          const userName = user.name;\n    \n          if (!grouped[userName]) {\n            grouped[userName] = [];\n          }\n    \n          grouped[userName].push(ticket);\n        }\n    \n        return grouped;\n      }, {});\n    }\n    \n\n    setGroupedUserTickets(groupedTickets);\n    \n\n  \n  });\n}, [selectedGrouping]);\n\n\n\n  const dragEnded = (bid, cid) => {\n   \n    let s_boardIndex, s_cardIndex, t_boardIndex, t_cardIndex;\n    s_boardIndex = boards.findIndex((item) => item.id === bid);\n    if (s_boardIndex < 0) {\n      const sourceCardIndex = groupedUserTickets[bid]?.findIndex(\n        (item) => item.id === cid\n      );\n    \n      const targetCardIndex = groupedUserTickets[targetCard.bid]?.findIndex(\n        (item) => item.id === targetCard.cid\n      );\n      \n  \n      // Ensure sourceCardIndex and targetCardIndex are valid before proceeding\n      if (sourceCardIndex < 0 || targetCardIndex < 0) {\n        return;\n      }\n  \n      const sourceBoards = [...groupedUserTickets[bid]];\n      const targetBoards = [...groupedUserTickets[targetCard.bid]];\n      const sourceCard = sourceBoards[sourceCardIndex];\n  \n      sourceBoards.splice(sourceCardIndex, 1);\n      targetBoards.splice(targetCardIndex, 0, sourceCard);\n  \n      // Update the state to trigger re-render\n      setGroupedUserTickets((prevGrouped) => ({\n        ...prevGrouped,\n        [bid]: sourceBoards,\n        [targetCard.bid]: targetBoards,\n      }));\n  \n      setTargetCard({\n        bid: \"\",\n        cid: \"\",\n      });\n  \n      return;\n    }\n\n    s_cardIndex = boards[s_boardIndex]?.cards?.findIndex(\n      (item) => item.id === cid\n    );\n    if (s_cardIndex < 0) return;\n\n    t_boardIndex = boards.findIndex((item) => item.id === targetCard.bid);\n    if (t_boardIndex < 0) return;\n\n    t_cardIndex = boards[t_boardIndex]?.cards?.findIndex(\n      (item) => item.id === targetCard.cid\n    );\n    if (t_cardIndex < 0) return;\n\n    const tempBoards = [...boards];\n    const sourceCard = tempBoards[s_boardIndex].cards[s_cardIndex];\n    tempBoards[s_boardIndex].cards.splice(s_cardIndex, 1);\n    tempBoards[t_boardIndex].cards.splice(t_cardIndex, 0, sourceCard);\n    setBoards(tempBoards);\n\n    setTargetCard({\n      bid: \"\",\n      cid: \"\",\n    });\n  };\n\n  const dragEntered = (bid, cid) => {\n    if (targetCard.cid === cid) return;\n    setTargetCard({\n      bid,\n      cid,\n    });\n    console.log(\"drag\")\n  };\n\n  const updateCard = (bid, cid, card) => {\n    console.log(card)\n    const index = boards.findIndex((item) => item.id === bid);\n    if (index < 0) {\n      // Board with the given id is not found, update the card directly in groupedUserTickets\n      const sourceCardIndex = groupedUserTickets[bid]?.findIndex(\n        (item) => item.id === cid\n      );\n  \n      // Ensure sourceCardIndex is valid before proceeding\n      if (sourceCardIndex < 0) {\n        return;\n      }\n  \n      const sourceBoards = [...groupedUserTickets[bid]];\n      sourceBoards[sourceCardIndex] = card;\n  \n      // Update the state to trigger re-render\n      setGroupedUserTickets((prevGrouped) => ({\n        ...prevGrouped,\n        [bid]: sourceBoards,\n      }));\n  \n      return;\n    }\n  \n    // Board with the given id is found, update the card in the existing board\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n  \n    const cardIndex = cards.findIndex((item) => item.id === cid);\n    if (cardIndex < 0) {\n      return;\n    }\n  \n    tempBoards[index].cards[cardIndex] = card;\n  \n    // Update the state to trigger re-render\n    setBoards(tempBoards);\n  };\n  \n\n  useEffect(() => {\n    localStorage.setItem(\"prac-kanban\", JSON.stringify(boards));\n  }, [boards]);\n  \n  \n\n  return (\n    <div className=\"app\">\n      <div className=\"app_nav\">\n      \n        <h1>Kanban Board</h1>\n        <CustomDropdown\n          onGroupingChange={handleGroupingChange}\n          onOrderingChange={handleOrderingChange}\n        />          \n          <div>\n            <h3>Selected Grouping: {selectedGrouping}</h3>\n          \n          </div>\n       \n       \n        <div className=\"app_boards_container\">\n          <div className=\"app_boards\">\n            {boards.map((item) => (\n              <Board\n                key={item.id}\n                board={item}\n                addCard={addCardHandler}\n                removeBoard={() => removeBoard(item.id)}\n                removeCard={removeCard}\n                dragEnded={dragEnded}\n                dragEntered={dragEntered}\n                updateCard={updateCard}\n                addBoard={addboardHandler}\n              />\n            ))}            \n            \n            {Object.keys(groupedUserTickets).map((boardKey) => (\n              <Board\n                key={boardKey}\n                board={{\n                  id: boardKey,\n                  title: boardKey,\n                  cards: groupedUserTickets[boardKey],\n                }}\n                addCard={addCardHandler}\n                removeBoard={() => removeBoard(boardKey)}\n                removeCard={removeCard}\n                dragEnded={dragEnded}\n                dragEntered={dragEntered}\n                updateCard={updateCard}\n                addBoard={addboardHandler}\n              />\n            ))}\n            <div className=\"app_boards_last\">\n            <Editable\n              displayClass=\"app_boards_add-board\"\n              editClass=\"app_boards_add-board_edit\"\n              placeholder=\"Enter Board Name\"\n              text=\"Add Board\"\n              buttonText=\"Add Board\"\n              onSubmit={addboardHandler}\n            />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}