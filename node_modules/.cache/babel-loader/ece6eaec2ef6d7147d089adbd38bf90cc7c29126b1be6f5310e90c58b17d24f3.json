{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{fetchData}from'./utils';import Board from\"./Components/Board/Board\";import CustomDropdown from\"./Components/CustomDropdown\";import Editable from\"./Components/Editabled/Editable\";import\"./App.css\";function App(){const[boards,setBoards]=useState([]);const[targetCard,setTargetCard]=useState({bid:\"\",cid:\"\"});const handleGroupingChange=value=>{setSelectedGrouping(value);};const handleOrderingChange=value=>{setSelectedOrdering(value);};const addboardHandler=name=>{const tempBoards=[...boards];tempBoards.push({id:Date.now()+Math.random()*2,title:name,cards:[]});setBoards(tempBoards);};const removeBoard=id=>{const index=boards.findIndex(item=>item.id===id);if(index<0)return;const tempBoards=[...boards];tempBoards.splice(index,1);setBoards(tempBoards);};const addCardHandler=(id,title)=>{console.log(id,title);const index=boards.findIndex(item=>item.id===id);if(index<0){// Board with the given id is not found, add a new card directly to groupedUserTickets\nconst newCard={id:Date.now()+Math.random()*2,title};setGroupedUserTickets(prevGrouped=>{console.log(\"Previous Grouped:\",prevGrouped[id]);prevGrouped[id]=[...prevGrouped[id],newCard];return{...prevGrouped// Your state update logic here\n};});}else{// Board with the given id is found, add a new card to the existing board\nconst tempBoards=[...boards];tempBoards[index].cards.push({id:Date.now()+Math.random()*2,title,labels:[],date:\"\",tasks:[]});setBoards(tempBoards);}};const removeCard=(bid,cid)=>{const index=boards.findIndex(item=>item.id===bid);if(index<0){// Board with the given id is not found, remove the card from groupedUserTickets\nconsole.log(\"Board not found, removing from groupedUserTickets\");setGroupedUserTickets(prevGrouped=>{const updatedGrouped={...prevGrouped};// Check if the board exists in groupedUserTickets\nif(updatedGrouped[bid]){// Filter out the card with the matching cid\nupdatedGrouped[bid]=updatedGrouped[bid].filter(card=>card.id!==cid);}return updatedGrouped;});return;}// Board is found, remove the card from the board in boards\nconst tempBoards=[...boards];const cards=tempBoards[index].cards;const cardIndex=cards.findIndex(item=>item.id===cid);if(cardIndex<0)return;cards.splice(cardIndex,1);setBoards(tempBoards);};const[tickets,setTickets]=useState([]);const[users,setUsers]=useState([]);const[groupedUserTickets,setGroupedUserTickets]=useState({'Backlog':[],'Todo':[],'In progress':[],'Done':[],'Cancelled':[]});const[selectedGrouping,setSelectedGrouping]=useState('');const[selectedOrdering,setSelectedOrdering]=useState('');useEffect(()=>{fetchData().then(_ref=>{let{tickets,users}=_ref;setTickets(tickets);setUsers(users);// Group tickets dynamically based on selected grouping\nlet groupedTickets={};if(selectedGrouping==='status'){// Group by status\ngroupedTickets=tickets.reduce((grouped,ticket)=>{const status=ticket.status;if(!grouped[status]){grouped[status]=[];}grouped[status].push(ticket);return grouped;},{});}else if(selectedGrouping==='priority'){// Group by priority\ngroupedTickets=tickets.reduce((grouped,ticket)=>{const priority=ticket.priority;if(!grouped[priority]){grouped[priority]=[];}grouped[priority].push(ticket);return grouped;},{});}else if(selectedGrouping==='user'){// Group by user\ngroupedTickets=tickets.reduce((grouped,ticket)=>{const userId=ticket.userId;if(!grouped[userId]){grouped[userId]=[];}grouped[userId].push(ticket);return grouped;},{});}setGroupedUserTickets(groupedTickets);});},[selectedGrouping]);const dragEnded=(bid,cid)=>{var _boards$s_boardIndex,_boards$s_boardIndex$,_boards$t_boardIndex,_boards$t_boardIndex$;let s_boardIndex,s_cardIndex,t_boardIndex,t_cardIndex;s_boardIndex=boards.findIndex(item=>item.id===bid);if(s_boardIndex<0){var _groupedUserTickets$b,_groupedUserTickets$t;const sourceCardIndex=(_groupedUserTickets$b=groupedUserTickets[bid])===null||_groupedUserTickets$b===void 0?void 0:_groupedUserTickets$b.findIndex(item=>item.id===cid);const targetCardIndex=(_groupedUserTickets$t=groupedUserTickets[targetCard.bid])===null||_groupedUserTickets$t===void 0?void 0:_groupedUserTickets$t.findIndex(item=>item.id===targetCard.cid);// Ensure sourceCardIndex and targetCardIndex are valid before proceeding\nif(sourceCardIndex<0||targetCardIndex<0){return;}const sourceBoards=[...groupedUserTickets[bid]];const targetBoards=[...groupedUserTickets[targetCard.bid]];const sourceCard=sourceBoards[sourceCardIndex];sourceBoards.splice(sourceCardIndex,1);targetBoards.splice(targetCardIndex,0,sourceCard);// Update the state to trigger re-render\nsetGroupedUserTickets(prevGrouped=>({...prevGrouped,[bid]:sourceBoards,[targetCard.bid]:targetBoards}));setTargetCard({bid:\"\",cid:\"\"});return;}s_cardIndex=(_boards$s_boardIndex=boards[s_boardIndex])===null||_boards$s_boardIndex===void 0?void 0:(_boards$s_boardIndex$=_boards$s_boardIndex.cards)===null||_boards$s_boardIndex$===void 0?void 0:_boards$s_boardIndex$.findIndex(item=>item.id===cid);if(s_cardIndex<0)return;t_boardIndex=boards.findIndex(item=>item.id===targetCard.bid);if(t_boardIndex<0)return;t_cardIndex=(_boards$t_boardIndex=boards[t_boardIndex])===null||_boards$t_boardIndex===void 0?void 0:(_boards$t_boardIndex$=_boards$t_boardIndex.cards)===null||_boards$t_boardIndex$===void 0?void 0:_boards$t_boardIndex$.findIndex(item=>item.id===targetCard.cid);if(t_cardIndex<0)return;const tempBoards=[...boards];const sourceCard=tempBoards[s_boardIndex].cards[s_cardIndex];tempBoards[s_boardIndex].cards.splice(s_cardIndex,1);tempBoards[t_boardIndex].cards.splice(t_cardIndex,0,sourceCard);setBoards(tempBoards);setTargetCard({bid:\"\",cid:\"\"});};const dragEntered=(bid,cid)=>{if(targetCard.cid===cid)return;setTargetCard({bid,cid});console.log(\"drag\");};const updateCard=(bid,cid,card)=>{console.log(card);const index=boards.findIndex(item=>item.id===bid);if(index<0){var _groupedUserTickets$b2;// Board with the given id is not found, update the card directly in groupedUserTickets\nconst sourceCardIndex=(_groupedUserTickets$b2=groupedUserTickets[bid])===null||_groupedUserTickets$b2===void 0?void 0:_groupedUserTickets$b2.findIndex(item=>item.id===cid);// Ensure sourceCardIndex is valid before proceeding\nif(sourceCardIndex<0){return;}const sourceBoards=[...groupedUserTickets[bid]];sourceBoards[sourceCardIndex]=card;// Update the state to trigger re-render\nsetGroupedUserTickets(prevGrouped=>({...prevGrouped,[bid]:sourceBoards}));return;}// Board with the given id is found, update the card in the existing board\nconst tempBoards=[...boards];const cards=tempBoards[index].cards;const cardIndex=cards.findIndex(item=>item.id===cid);if(cardIndex<0){return;}tempBoards[index].cards[cardIndex]=card;// Update the state to trigger re-render\nsetBoards(tempBoards);};useEffect(()=>{localStorage.setItem(\"prac-kanban\",JSON.stringify(boards));},[boards]);return/*#__PURE__*/React.createElement(\"div\",{className:\"app\"},/*#__PURE__*/React.createElement(\"div\",{className:\"app_nav\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Kanban Board\"),/*#__PURE__*/React.createElement(CustomDropdown,{onGroupingChange:handleGroupingChange,onOrderingChange:handleOrderingChange}),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h3\",null,\"Selected Grouping: \",selectedGrouping))),/*#__PURE__*/React.createElement(\"div\",{className:\"app_boards_container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"app_boards\"},boards.map(item=>/*#__PURE__*/React.createElement(Board,{key:item.id,board:item,addCard:addCardHandler,removeBoard:()=>removeBoard(item.id),removeCard:removeCard,dragEnded:dragEnded,dragEntered:dragEntered,updateCard:updateCard,addBoard:addboardHandler})),Object.keys(groupedUserTickets).map(boardKey=>/*#__PURE__*/React.createElement(Board,{key:boardKey,board:{id:boardKey,title:boardKey,cards:groupedUserTickets[boardKey]},addCard:addCardHandler,removeBoard:()=>removeBoard(boardKey),removeCard:removeCard,dragEnded:dragEnded,dragEntered:dragEntered,updateCard:updateCard,addBoard:addboardHandler})),/*#__PURE__*/React.createElement(\"div\",{className:\"app_boards_last\"},/*#__PURE__*/React.createElement(Editable,{displayClass:\"app_boards_add-board\",editClass:\"app_boards_add-board_edit\",placeholder:\"Enter Board Name\",text:\"Add Board\",buttonText:\"Add Board\",onSubmit:addboardHandler}))))));}export default App;","map":{"version":3,"names":["React","useEffect","useState","fetchData","Board","CustomDropdown","Editable","App","boards","setBoards","targetCard","setTargetCard","bid","cid","handleGroupingChange","value","setSelectedGrouping","handleOrderingChange","setSelectedOrdering","addboardHandler","name","tempBoards","push","id","Date","now","Math","random","title","cards","removeBoard","index","findIndex","item","splice","addCardHandler","console","log","newCard","setGroupedUserTickets","prevGrouped","labels","date","tasks","removeCard","updatedGrouped","filter","card","cardIndex","tickets","setTickets","users","setUsers","groupedUserTickets","selectedGrouping","selectedOrdering","then","_ref","groupedTickets","reduce","grouped","ticket","status","priority","userId","dragEnded","_boards$s_boardIndex","_boards$s_boardIndex$","_boards$t_boardIndex","_boards$t_boardIndex$","s_boardIndex","s_cardIndex","t_boardIndex","t_cardIndex","_groupedUserTickets$b","_groupedUserTickets$t","sourceCardIndex","targetCardIndex","sourceBoards","targetBoards","sourceCard","dragEntered","updateCard","_groupedUserTickets$b2","localStorage","setItem","JSON","stringify","createElement","className","onGroupingChange","onOrderingChange","map","key","board","addCard","addBoard","Object","keys","boardKey","displayClass","editClass","placeholder","text","buttonText","onSubmit"],"sources":["C:/Users/dasam/OneDrive/Desktop/Web development/my-react-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchData } from './utils';\n\nimport Board from \"./Components/Board/Board\";\nimport CustomDropdown from \"./Components/CustomDropdown\";\nimport Editable from \"./Components/Editabled/Editable\";\n\n\nimport \"./App.css\";\n\nfunction App() {\n  const [boards, setBoards] = useState(\n     []\n  );\n \n\n  const [targetCard, setTargetCard] = useState({\n    bid: \"\",\n    cid: \"\",\n  });\n  \n  const handleGroupingChange = (value) => {\n    setSelectedGrouping(value);\n  };\n\n  const handleOrderingChange = (value) => {\n    setSelectedOrdering(value);\n  };\n\n  const addboardHandler = (name) => {\n    const tempBoards = [...boards];\n    tempBoards.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: [],\n    });\n    setBoards(tempBoards);\n  };\n  \n\n  const removeBoard = (id) => {\n    \n    const index = boards.findIndex((item) => item.id === id);\n    if (index < 0) return;\n\n    const tempBoards = [...boards];\n    tempBoards.splice(index, 1);\n    setBoards(tempBoards);\n  };\n\n  const addCardHandler = (id, title) => {\n    console.log(id, title);\n    const index = boards.findIndex((item) => item.id === id);\n  \n    if (index < 0) {\n      // Board with the given id is not found, add a new card directly to groupedUserTickets\n    \n      const newCard = {\n        id: Date.now() + Math.random() * 2,\n        title,\n        \n      };\n  \n      setGroupedUserTickets((prevGrouped) => {\n        console.log(\"Previous Grouped:\", prevGrouped[id]);\n        prevGrouped[id]=[...prevGrouped[id],newCard]\n        \n      \n        return {\n          ...prevGrouped,\n          // Your state update logic here\n        };\n      });\n    \n    } else {\n      // Board with the given id is found, add a new card to the existing board\n      const tempBoards = [...boards];\n      tempBoards[index].cards.push({\n        id: Date.now() + Math.random() * 2,\n        title,\n        labels: [],\n        date: \"\",\n        tasks: [],\n      });\n  \n      setBoards(tempBoards);\n    }\n  };\n  \n\n      const removeCard = (bid, cid) => {\n        \n        const index = boards.findIndex((item) => item.id === bid);\n      \n        if (index < 0) {\n          // Board with the given id is not found, remove the card from groupedUserTickets\n          console.log(\"Board not found, removing from groupedUserTickets\");\n      \n          setGroupedUserTickets((prevGrouped) => {\n            const updatedGrouped = { ...prevGrouped };\n      \n            // Check if the board exists in groupedUserTickets\n            if (updatedGrouped[bid]) {\n              // Filter out the card with the matching cid\n              updatedGrouped[bid] = updatedGrouped[bid].filter((card) => card.id !== cid);\n            }\n      \n            return updatedGrouped;\n          });\n      \n          return;\n        }\n      \n        // Board is found, remove the card from the board in boards\n        const tempBoards = [...boards];\n        const cards = tempBoards[index].cards;\n      \n        const cardIndex = cards.findIndex((item) => item.id === cid);\n        if (cardIndex < 0) return;\n      \n        cards.splice(cardIndex, 1);\n        setBoards(tempBoards);\n      };\n  \n\n  const [tickets, setTickets] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [groupedUserTickets, setGroupedUserTickets] = useState({\n    'Backlog': [],\n    'Todo': [],\n    'In progress': [],\n    'Done': [],\n    'Cancelled': [],\n  });\n  const [selectedGrouping, setSelectedGrouping] = useState('');\n  const [selectedOrdering, setSelectedOrdering] = useState('');\n\n  useEffect(() => {\n  fetchData().then(({ tickets, users }) => {\n  \n    setTickets(tickets);\n    setUsers(users);\n\n    // Group tickets dynamically based on selected grouping\n    let groupedTickets = {};\n    if (selectedGrouping === 'status') {\n      // Group by status\n      groupedTickets = tickets.reduce((grouped, ticket) => {\n        const status = ticket.status;\n        if (!grouped[status]) {\n          grouped[status] = [];\n        }\n        grouped[status].push(ticket);\n        return grouped;\n      }, {});\n    } else if (selectedGrouping === 'priority') {\n      // Group by priority\n      groupedTickets = tickets.reduce((grouped, ticket) => {\n        const priority = ticket.priority;\n        if (!grouped[priority]) {\n          grouped[priority] = [];\n        }\n        grouped[priority].push(ticket);\n        return grouped;\n      }, {});\n    } else if (selectedGrouping === 'user') {\n      // Group by user\n      groupedTickets = tickets.reduce((grouped, ticket) => {\n        const userId = ticket.userId;\n        if (!grouped[userId]) {\n          grouped[userId] = [];\n        }\n        grouped[userId].push(ticket);\n        return grouped;\n      }, {});\n    }\n\n    setGroupedUserTickets(groupedTickets);\n    \n\n  \n  });\n}, [selectedGrouping]);\n\n\n\n  const dragEnded = (bid, cid) => {\n   \n    let s_boardIndex, s_cardIndex, t_boardIndex, t_cardIndex;\n    s_boardIndex = boards.findIndex((item) => item.id === bid);\n    if (s_boardIndex < 0) {\n      const sourceCardIndex = groupedUserTickets[bid]?.findIndex(\n        (item) => item.id === cid\n      );\n    \n      const targetCardIndex = groupedUserTickets[targetCard.bid]?.findIndex(\n        (item) => item.id === targetCard.cid\n      );\n      \n  \n      // Ensure sourceCardIndex and targetCardIndex are valid before proceeding\n      if (sourceCardIndex < 0 || targetCardIndex < 0) {\n        return;\n      }\n  \n      const sourceBoards = [...groupedUserTickets[bid]];\n      const targetBoards = [...groupedUserTickets[targetCard.bid]];\n      const sourceCard = sourceBoards[sourceCardIndex];\n  \n      sourceBoards.splice(sourceCardIndex, 1);\n      targetBoards.splice(targetCardIndex, 0, sourceCard);\n  \n      // Update the state to trigger re-render\n      setGroupedUserTickets((prevGrouped) => ({\n        ...prevGrouped,\n        [bid]: sourceBoards,\n        [targetCard.bid]: targetBoards,\n      }));\n  \n      setTargetCard({\n        bid: \"\",\n        cid: \"\",\n      });\n  \n      return;\n    }\n\n    s_cardIndex = boards[s_boardIndex]?.cards?.findIndex(\n      (item) => item.id === cid\n    );\n    if (s_cardIndex < 0) return;\n\n    t_boardIndex = boards.findIndex((item) => item.id === targetCard.bid);\n    if (t_boardIndex < 0) return;\n\n    t_cardIndex = boards[t_boardIndex]?.cards?.findIndex(\n      (item) => item.id === targetCard.cid\n    );\n    if (t_cardIndex < 0) return;\n\n    const tempBoards = [...boards];\n    const sourceCard = tempBoards[s_boardIndex].cards[s_cardIndex];\n    tempBoards[s_boardIndex].cards.splice(s_cardIndex, 1);\n    tempBoards[t_boardIndex].cards.splice(t_cardIndex, 0, sourceCard);\n    setBoards(tempBoards);\n\n    setTargetCard({\n      bid: \"\",\n      cid: \"\",\n    });\n  };\n\n  const dragEntered = (bid, cid) => {\n    if (targetCard.cid === cid) return;\n    setTargetCard({\n      bid,\n      cid,\n    });\n    console.log(\"drag\")\n  };\n\n  const updateCard = (bid, cid, card) => {\n    console.log(card)\n    const index = boards.findIndex((item) => item.id === bid);\n    if (index < 0) {\n      // Board with the given id is not found, update the card directly in groupedUserTickets\n      const sourceCardIndex = groupedUserTickets[bid]?.findIndex(\n        (item) => item.id === cid\n      );\n  \n      // Ensure sourceCardIndex is valid before proceeding\n      if (sourceCardIndex < 0) {\n        return;\n      }\n  \n      const sourceBoards = [...groupedUserTickets[bid]];\n      sourceBoards[sourceCardIndex] = card;\n  \n      // Update the state to trigger re-render\n      setGroupedUserTickets((prevGrouped) => ({\n        ...prevGrouped,\n        [bid]: sourceBoards,\n      }));\n  \n      return;\n    }\n  \n    // Board with the given id is found, update the card in the existing board\n    const tempBoards = [...boards];\n    const cards = tempBoards[index].cards;\n  \n    const cardIndex = cards.findIndex((item) => item.id === cid);\n    if (cardIndex < 0) {\n      return;\n    }\n  \n    tempBoards[index].cards[cardIndex] = card;\n  \n    // Update the state to trigger re-render\n    setBoards(tempBoards);\n  };\n  \n\n  useEffect(() => {\n    localStorage.setItem(\"prac-kanban\", JSON.stringify(boards));\n  }, [boards]);\n  \n  \n\n  return (\n    <div className=\"app\">\n      <div className=\"app_nav\">\n        <h1>Kanban Board</h1>\n        <CustomDropdown\n          onGroupingChange={handleGroupingChange}\n          onOrderingChange={handleOrderingChange}\n        />\n      \n        <div>\n          \n          <div>\n            <h3>Selected Grouping: {selectedGrouping}</h3>\n          \n          </div>\n        </div>\n        <div className=\"app_boards_container\">\n          <div className=\"app_boards\">\n            {boards.map((item) => (\n              <Board\n                key={item.id}\n                board={item}\n                addCard={addCardHandler}\n                removeBoard={() => removeBoard(item.id)}\n                removeCard={removeCard}\n                dragEnded={dragEnded}\n                dragEntered={dragEntered}\n                updateCard={updateCard}\n                addBoard={addboardHandler}\n              />\n            ))}            \n            \n            {Object.keys(groupedUserTickets).map((boardKey) => (\n              <Board\n                key={boardKey}\n                board={{\n                  id: boardKey,\n                  title: boardKey,\n                  cards: groupedUserTickets[boardKey],\n                }}\n                addCard={addCardHandler}\n                removeBoard={() => removeBoard(boardKey)}\n                removeCard={removeCard}\n                dragEnded={dragEnded}\n                dragEntered={dragEntered}\n                updateCard={updateCard}\n                addBoard={addboardHandler}\n              />\n            ))}\n            <div className=\"app_boards_last\">\n            <Editable\n              displayClass=\"app_boards_add-board\"\n              editClass=\"app_boards_add-board_edit\"\n              placeholder=\"Enter Board Name\"\n              text=\"Add Board\"\n              buttonText=\"Add Board\"\n              onSubmit={addboardHandler}\n            />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}